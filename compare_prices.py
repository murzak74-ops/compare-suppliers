import streamlit as st
import pandas as pd

# --------------------------
# 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ e-mail
# --------------------------
AUTHORIZED_EMAILS = [
    "rab.org@bk.ru",
    "rab-organ@yandex.ru",
    "ooo.rab.org@gmail.com"
]

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    st.title("üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö")

    email = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail")

    if st.button("–í–æ–π—Ç–∏"):
        if email.strip().lower() in [e.lower() for e in AUTHORIZED_EMAILS]:
            st.session_state.authenticated = True
            st.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ‚úÖ")
        else:
            st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")

    st.stop()

# ---- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è ----
st.markdown(
    """
    <style>
    /* –û–±—â–∏–π —Ñ–æ–Ω */
    .main {
        background-color: #f8f9fa;
    }
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        font-family: 'Arial', sans-serif;
    }
    /* –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */
    .instruction-box {
        background-color: #ffffff;
        border: 1px solid #dcdcdc;
        border-radius: 10px;
        padding: 15px 20px;
        margin-bottom: 20px;
        box-shadow: 2px 2px 6px rgba(0,0,0,0.05);
    }
    /* –¢–∞–±–ª–∏—Ü—ã */
    .stDataFrame tbody tr td {
        text-align: center;
    }
    /* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è */
    .stDownloadButton button {
        background-color: #004080;
        color: white;
        border-radius: 8px;
        padding: 8px 16px;
        border: none;
    }
    .stDownloadButton button:hover {
        background-color: #0066cc;
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ---- –®–∞–ø–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ----
col1, col2 = st.columns([1, 3])
with col1:
    st.image("–õ–æ–≥–æ–Ω–æ–≤2.png", width=200)  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ—Ç–∏–ø–∞
with col2:
    st.markdown(
        """
        <h1 style='color:#004080; font-size:38px; margin-bottom:0px;'>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</h1>
        <h3 style='color:gray; font-weight:normal; margin-top:5px;'>–ö–æ–º–ø–∞–Ω–∏—è ¬´–†–∞–±–æ—á–∏–π –û—Ä–≥–∞–Ω¬ª</h3>
        """,
        unsafe_allow_html=True
    )

# ---- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ----
st.markdown(
    """
    <div class="instruction-box">
    <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:</b><br>
    - <b>–ê—Ä—Ç–∏–∫—É–ª</b><br>
    - <b>–ö–æ–ª-–≤–æ</b><br>
    - –ø–∞—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: <code>–¶–µ–Ω–∞_* </code> –∏ <code>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_* </code><br><br>
    <i>–ù—É–ª–µ–≤—ã–µ –∏ –ø—É—Å—Ç—ã–µ —Ü–µ–Ω—ã —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã–±–æ—Ä –ª—É—á—à–∏—Ö.</i>
    </div>
    """,
    unsafe_allow_html=True
)

# ---- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ----
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel", type=["xlsx", "xls"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)

        if not {"–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–ª-–≤–æ"}.issubset(df.columns):
            st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ '–ê—Ä—Ç–∏–∫—É–ª' –∏ '–ö–æ–ª-–≤–æ'.")
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            suppliers = {}
            for col in df.columns:
                if col.startswith("–¶–µ–Ω–∞_"):
                    supplier_name = col.replace("–¶–µ–Ω–∞_", "")
                    prod_col = f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_{supplier_name}"
                    if prod_col in df.columns:
                        suppliers[supplier_name] = (col, prod_col)

            if not suppliers:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –≤–∏–¥–∞ '–¶–µ–Ω–∞_*' –∏ '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_*'.")
            else:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                records = []
                for _, row in df.iterrows():
                    for supplier, (price_col, prod_col) in suppliers.items():
                        price = row[price_col]
                        producer = row[prod_col]
                        records.append({
                            "–ê—Ä—Ç–∏–∫—É–ª": row["–ê—Ä—Ç–∏–∫—É–ª"],
                            "–ö–æ–ª-–≤–æ": row["–ö–æ–ª-–≤–æ"],
                            "–ü–æ—Å—Ç–∞–≤—â–∏–∫": supplier,
                            "–¶–µ–Ω–∞": price if pd.notna(price) and price > 0 else None,
                            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": producer
                        })

                long_df = pd.DataFrame(records)

                mode = st.radio(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
                    ["–õ—É—á—à–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫", "–¢–û–ü-3 –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"]
                )

                if mode == "–õ—É—á—à–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫":
                    best_records = []
                    for artikel, group in long_df.groupby("–ê—Ä—Ç–∏–∫—É–ª"):
                        valid = group[group["–¶–µ–Ω–∞"].notna()]
                        if not valid.empty:
                            idx = valid["–¶–µ–Ω–∞"].idxmin()
                            best_records.append(long_df.loc[idx])
                        else:
                            row = group.iloc[0].copy()
                            row["–¶–µ–Ω–∞"] = None
                            row["–ü–æ—Å—Ç–∞–≤—â–∏–∫"] = None
                            row["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"] = None
                            best_records.append(row)
                    result = pd.DataFrame(best_records, columns=["–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–ª-–≤–æ", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–¶–µ–Ω–∞"])
                    st.subheader("–õ—É—á—à–∏–µ —Ü–µ–Ω—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É")
                    st.dataframe(result.reset_index(drop=True))

                else:  # –¢–û–ü-3 –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
                    def top_n_wide(group, n=3):
                        temp = group[group["–¶–µ–Ω–∞"].notna()].sort_values("–¶–µ–Ω–∞").head(n)
                        row = {
                            "–ê—Ä—Ç–∏–∫—É–ª": group["–ê—Ä—Ç–∏–∫—É–ª"].iloc[0],
                            "–ö–æ–ª-–≤–æ": group["–ö–æ–ª-–≤–æ"].iloc[0]
                        }
                        for i, (_, r) in enumerate(temp.iterrows(), 1):
                            row[f"–¶–µ–Ω–∞_{i}"] = r["–¶–µ–Ω–∞"]
                            row[f"–ü–æ—Å—Ç–∞–≤—â–∏–∫_{i}"] = r["–ü–æ—Å—Ç–∞–≤—â–∏–∫"]
                            row[f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_{i}"] = r["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"]
                        for j in range(len(temp)+1, n+1):
                            row[f"–¶–µ–Ω–∞_{j}"] = None
                            row[f"–ü–æ—Å—Ç–∞–≤—â–∏–∫_{j}"] = None
                            row[f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_{j}"] = None
                        return pd.Series(row)

                    result = long_df.groupby("–ê—Ä—Ç–∏–∫—É–ª").apply(top_n_wide).reset_index(drop=True)
                    st.subheader("–¢–û–ü-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É")
                    st.dataframe(result)

                # –≠–∫—Å–ø–æ—Ä—Ç
                @st.cache_data
                def convert_to_excel(df):
                    from io import BytesIO
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine="openpyxl") as writer:
                        df.to_excel(writer, index=False, sheet_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    return output.getvalue()

                excel_data = convert_to_excel(result)

                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Excel",
                    data=excel_data,
                    file_name="best_prices.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")