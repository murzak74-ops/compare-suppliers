import streamlit as st
import pandas as pd

# --------------------------
# 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ e-mail
# --------------------------
AUTHORIZED_EMAILS = [
    "rab.org@bk.ru",
    "rab-organ@yandex.ru",
    "ooo.rab.org@gmail.com",
]

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    st.title("üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö")
    email = st.text_input("–õ–æ–≥–∏–Ω –ø–æ–º–Ω–∏—à—å, –¥–∞?")
    if st.button("–í–æ–π—Ç–∏"):
        if email.strip().lower() in [e.lower() for e in AUTHORIZED_EMAILS]:
            st.session_state.authenticated = True
            st.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ‚úÖ")
        else:
            st.error("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
    st.stop()

# ---- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è ----
st.markdown(
    """
    <style>
    .main { background-color: #f8f9fa; }
    h1, h2, h3 { font-family: 'Arial', sans-serif; }
    .instruction-box {
        background-color: #ffffff; border: 1px solid #dcdcdc; border-radius: 10px;
        padding: 15px 20px; margin-bottom: 20px; box-shadow: 2px 2px 6px rgba(0,0,0,0.05);
    }
    .stDataFrame tbody tr td { text-align: center; }
    .stDownloadButton button {
        background-color: #004080; color: white; border-radius: 8px; padding: 8px 16px; border: none;
    }
    .stDownloadButton button:hover { background-color: #0066cc; color: white; }
    </style>
    """,
    unsafe_allow_html=True,
)

# ---- –®–∞–ø–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ----
col1, col2 = st.columns([1, 3])
with col1:
    st.image("–õ–æ–≥–æ–Ω–æ–≤2.png", width=200)
with col2:
    st.markdown(
        """
        <h1 style='color:#004080; font-size:38px; margin-bottom:0px;'>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</h1>
        <h3 style='color:gray; font-weight:normal; margin-top:5px;'>–ö–æ–º–ø–∞–Ω–∏—è ¬´–†–∞–±–æ—á–∏–π –û—Ä–≥–∞–Ω¬ª</h3>
        """,
        unsafe_allow_html=True,
    )

# ---- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ----
st.markdown(
    """
    <div class=\"instruction-box\">
    <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:</b><br>
    - <b>–ê—Ä—Ç–∏–∫—É–ª</b><br>
    - <b>–ö–æ–ª-–≤–æ</b> (–∏–ª–∏ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>)<br>
    - –ø–∞—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: <code>–¶–µ–Ω–∞_*</code> –∏ <code>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_*</code><br><br>
    <i>–ü—É—Å—Ç—ã–µ –∏ –Ω—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.</i>
    </div>
    """,
    unsafe_allow_html=True,
)

# ---- –û–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–∫–∏ (—Å–∫–∞—á–∞—Ç—å) ----
with st.container():
    st.markdown("**üìé –û–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–∫–∏** ‚Äî —Å–∫–∞—á–∞–π—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.")

    @st.cache_data
    def build_request_template() -> bytes:
        # –û—Ç–¥–∞—ë–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª-–æ–±—Ä–∞–∑–µ—Ü –Ω–∞–ø—Ä—è–º—É—é
        with open("–ó–∞—è–≤–∫–∞_–æ–±—Ä–∞–∑–µ—Ü.xlsx", "rb") as f:
            return f.read()

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–∫–∏ (Excel)",
        data=build_request_template(),
        file_name="–ó–∞—è–≤–∫–∞_–æ–±—Ä–∞–∑–µ—Ü.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

# ---- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ----
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel", type=["xlsx", "xls"])


def parse_suppliers_columns(columns):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –≤–∏–¥–∞ '–¶–µ–Ω–∞_<–ò–º—è>' –∏ '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_<–ò–º—è>'."""
    suppliers = {}
    for col in columns:
        if isinstance(col, str) and col.startswith("–¶–µ–Ω–∞_"):
            name = col.replace("–¶–µ–Ω–∞_", "")
            prod_col = f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_{name}"
            if prod_col in columns:
                suppliers[name] = (col, prod_col)
    return suppliers


if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if "–ö–æ–ª-–≤–æ" not in df.columns and "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" in df.columns:
            df = df.rename(columns={"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "–ö–æ–ª-–≤–æ"})
        if not {"–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–ª-–≤–æ"}.issubset(df.columns):
            st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ '–ê—Ä—Ç–∏–∫—É–ª' –∏ '–ö–æ–ª-–≤–æ' (–∏–ª–∏ '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ').")
            st.stop()

        suppliers = parse_suppliers_columns(df.columns)
        if not suppliers:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –≤–∏–¥–∞ '–¶–µ–Ω–∞_*' –∏ '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_*'.")
            st.stop()

        # –í ¬´–¥–ª–∏–Ω–Ω—ã–π¬ª —Ñ–æ—Ä–º–∞—Ç (–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–Ω—ã > 0)
        records = []
        for _, row in df.iterrows():
            for supplier, (price_col, prod_col) in suppliers.items():
                price = row[price_col]
                producer = row[prod_col]
                p = None
                if pd.notna(price):
                    try:
                        p = float(price)
                    except Exception:
                        p = None
                if p is not None and p > 0:
                    records.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": row["–ê—Ä—Ç–∏–∫—É–ª"],
                        "–ö–æ–ª-–≤–æ": row["–ö–æ–ª-–≤–æ"],
                        "–ü–æ—Å—Ç–∞–≤—â–∏–∫": supplier,
                        "–¶–µ–Ω–∞": p,
                        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": producer,
                    })
        long_df = pd.DataFrame(records)

        # –†–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mode = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            ["–õ—É—á—à–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫", "–í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)"]
        )

        # –û–ø—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞ –≥—Ä—É–ø–ø
        group_by_original = st.checkbox(
            "–°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–æ–≥–∏, –ø–æ—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª",
            value=False,
            help=(
                "–í —Ä–µ–∂–∏–º–µ '–í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏' –∞–Ω–∞–ª–æ–≥–∏ –±—É–¥—É—Ç –∏–¥—Ç–∏ –ø–µ—Ä–≤—ã–º–∏, –∑–∞—Ç–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã "
                "(–≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ ‚Äî –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã)."
            ),
        )

        # –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ü–µ–Ω)
        articles = df[["–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–ª-–≤–æ"]].copy()

        if mode == "–õ—É—á—à–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫":
            rows = []
            for _, base in articles.iterrows():
                a = base["–ê—Ä—Ç–∏–∫—É–ª"]
                q = base["–ö–æ–ª-–≤–æ"]
                g = long_df[long_df["–ê—Ä—Ç–∏–∫—É–ª"] == a]
                if not g.empty:
                    r = g.loc[g["–¶–µ–Ω–∞"].idxmin()]
                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": a,
                        "–ö–æ–ª-–≤–æ": q,
                        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": r["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"],
                        "–ü–æ—Å—Ç–∞–≤—â–∏–∫": r["–ü–æ—Å—Ç–∞–≤—â–∏–∫"],
                        "–¶–µ–Ω–∞": r["–¶–µ–Ω–∞"],
                    })
                else:
                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": a,
                        "–ö–æ–ª-–≤–æ": q,
                        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": None,
                        "–ü–æ—Å—Ç–∞–≤—â–∏–∫": None,
                        "–¶–µ–Ω–∞": None,
                    })
            result = pd.DataFrame(rows)
            st.subheader("–õ—É—á—à–∏–µ —Ü–µ–Ω—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É")
            st.dataframe(result, use_container_width=True)
        else:
            # –í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –≤ ¬´—à–∏—Ä–æ–∫—É—é¬ª —Å—Ç—Ä–æ–∫—É
            def all_sorted_wide(group: pd.DataFrame) -> pd.Series:
                temp = group.copy()
                temp["__is_original"] = (
                    temp["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"].astype(str).str.strip().str.lower().eq("–æ—Ä–∏–≥–∏–Ω–∞–ª")
                )
                if group_by_original:
                    temp = temp.sort_values(
                        ["__is_original", "–¶–µ–Ω–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫"], ascending=[True, True, True]
                    )
                else:
                    temp = temp.sort_values(["–¶–µ–Ω–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫"])
                row = {
                    "–ê—Ä—Ç–∏–∫—É–ª": group["–ê—Ä—Ç–∏–∫—É–ª"].iloc[0],
                    "–ö–æ–ª-–≤–æ": group["–ö–æ–ª-–≤–æ"].iloc[0],
                }
                for i, (_, r) in enumerate(temp.iterrows(), 1):
                    row[f"–¶–µ–Ω–∞_{i}"] = r["–¶–µ–Ω–∞"]
                    row[f"–ü–æ—Å—Ç–∞–≤—â–∏–∫_{i}"] = r["–ü–æ—Å—Ç–∞–≤—â–∏–∫"]
                    row[f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_{i}"] = r["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"]
                return pd.Series(row)

            wide_rows = []
            for _, base in articles.iterrows():
                a = base["–ê—Ä—Ç–∏–∫—É–ª"]
                q = base["–ö–æ–ª-–≤–æ"]
                g = long_df[long_df["–ê—Ä—Ç–∏–∫—É–ª"] == a]
                if not g.empty:
                    s = all_sorted_wide(g)
                    s["–ê—Ä—Ç–∏–∫—É–ª"], s["–ö–æ–ª-–≤–æ"] = a, q
                    wide_rows.append(s.to_dict())
                else:
                    wide_rows.append({"–ê—Ä—Ç–∏–∫—É–ª": a, "–ö–æ–ª-–≤–æ": q})
            result = pd.DataFrame(wide_rows).fillna(pd.NA)
            st.subheader("–í—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã)")
            st.dataframe(result, use_container_width=True)

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        @st.cache_data
        def to_excel_bytes(df_out: pd.DataFrame) -> bytes:
            from io import BytesIO
            from openpyxl.styles import Font
            from openpyxl.utils import get_column_letter

            out = BytesIO()
            with pd.ExcelWriter(out, engine="openpyxl") as writer:
                df_out.to_excel(writer, index=False, sheet_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                ws = writer.sheets["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"]

                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é —Å—Ç—Ä–æ–∫—É –∏ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                ws.freeze_panes = "B2"
                # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä—ã
                ws.auto_filter.ref = ws.dimensions

                # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                for col_idx in range(1, ws.max_column + 1):
                    max_length = 0
                    col_letter = get_column_letter(col_idx)
                    for row_idx in range(1, ws.max_row + 1):
                        cell = ws.cell(row=row_idx, column=col_idx)
                        value = cell.value
                        length = len(str(value)) if value is not None else 0
                        if length > max_length:
                            max_length = length
                    ws.column_dimensions[col_letter].width = max_length + 2

                # –í—ã–¥–µ–ª–µ–Ω–∏–µ "–û—Ä–∏–≥–∏–Ω–∞–ª" –∂–∏—Ä–Ω—ã–º –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å/–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_*
                header = [c.value for c in next(ws.iter_rows(min_row=1, max_row=1))]
                prod_cols = [
                    i + 1
                    for i, h in enumerate(header)
                    if isinstance(h, str) and (h == "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å" or h.startswith("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å_"))
                ]
                bold = Font(bold=True)
                for col_idx in prod_cols:
                    for row_idx in range(2, ws.max_row + 1):
                        cell = ws.cell(row=row_idx, column=col_idx)
                        if isinstance(cell.value, str) and cell.value.strip().lower() == "–æ—Ä–∏–≥–∏–Ω–∞–ª":
                            cell.font = bold

                # –ß–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ –¶–µ–Ω–∞/–¶–µ–Ω–∞_*
                price_cols = [
                    i + 1
                    for i, h in enumerate(header)
                    if isinstance(h, str) and (h == "–¶–µ–Ω–∞" or h.startswith("–¶–µ–Ω–∞_"))
                ]
                for col_idx in price_cols:
                    for row_idx in range(2, ws.max_row + 1):
                        cell = ws.cell(row=row_idx, column=col_idx)
                        if isinstance(cell.value, (int, float)):
                            cell.number_format = "#,##0.00"

            out.seek(0)
            return out.getvalue()

        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Excel",
            data=to_excel_bytes(result),
            file_name=(
                "best_suppliers.xlsx" if mode == "–õ—É—á—à–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫" else "all_suppliers_sorted.xlsx"
            ),
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

